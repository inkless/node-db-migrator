#!/usr/bin/env node
var CONSTANT = require('../constant');
var config = require('../config');
var migratorCore = require('../core');

if (config.argv.help) {
  console.log(('Usage: migrator [command] [migration-name] [options]\n\n' +
  'command:\n' +
  '  up                          Run a up migration.\n' +
  '  down                        Run a down migration.\n' +
  '  create                      Create a migration script.\n' +
  '  trigger                     Create a trigger script.\n' +
  '  daemon                      Spin up a daemon to listen for triggering,\n' +
  '                              it will execute corresponding trigger script.\n' +
  '                              It\'s strongly recommended to use forever to run it.\n' +
  '                              [Example] forever start migrate daemon\n' +
  'options:\n' +
  '  -v, --version               Print version info.\n' +
  '  -m, --migrations-dir        The directory containing your migration files.\n' +
  '                              [default: "' + CONSTANT.DEFAULT_MIGRATIONS_DIR + '"]\n' +
  '  -d, --migrations-database   Set the path of the migration table, which stores the\n' +
  '                              migration history.\n' +
  '                              [default: "' + CONSTANT.DEFAULT_MIGRATIONS_DATABASE + '"]\n' +
  '  -c, --db-config             Location of the database.json file.\n' +
  '                              [default: "' + CONSTANT.DEFAULT_DB_CONFIG + '"]\n' +
  '  -u, --db-in-use             Database might in use (mysql,mongo).\n' +
  '                              [default: "' + config.dbInUse + '"]\n' +
  '  -p, --port                  Port number when running daemon.\n' +
  '                              [default: "' + CONSTANT.DEFAULT_PORT + '"]\n' +
  '  --sql-file                  Automatically create two sql files for up and down statements\n' +
  '                              in /sqls and generate the javascript code that loads them.\n' +
  '                              [default: false | To be implemented]\n' +
  '  --dry-run                   Prints the SQL but doesn\'t run it.\n' +
  '                              [default: false | To be implemented]\n'));
  return;
} else if (config.argv.version) {
  console.log('v'+require('../package.json').version);
  return;
}

var operations = {
  // create migration script
  create: function(core, param) {
    core.create(param, CONSTANT.MIGRATE_TEMPLATE_PATH);
  },
  // run migration up
  up: function(core, param) {
    core.up(param);
  },
  // revert migration
  down: function(core, param) {
    core.down(param);
  },
  // create trigger script
  trigger: function(core, param) {
    core.create(param, CONSTANT.TRIGGER_TEMPLATE_PATH, CONSTANT.MIGRATE_TYPE.TRIGGER);
  },
  // start daemon and listen for migration triggers
  daemon: function(core, param) {
    core.daemon(param);
  }
};

var command = config.argv.command;
var param = config.argv.param;
var operation = operations[command];
if (operation) {
  operation(migratorCore, param);
} else {
  console.error('Command not found...');
}
